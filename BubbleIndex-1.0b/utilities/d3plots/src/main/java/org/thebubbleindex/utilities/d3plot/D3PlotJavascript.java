package org.thebubbleindex.utilities.d3plot;

public class D3PlotJavascript {

	public static final String jsScriptPartOne = "function mousemove() { var t = x.invert(d3.mouse(d3.select(\"#svgMain\").node())[0]), e = bisectDate(origData, t, 1); d3.selectAll(\".index\").data().forEach(function(n) { var a = n.values[e - 1], i = n.values[e], r = t - a.date > i.date - t ? i : a, d = x(r.date), l = y(r.yvalue); svg.select(\"#focus\" + n.name).attr(\"transform\", \"translate(\" + d + \",\" + l + \")\"), svg.select(\"#numtext\" + n.name).text(r.yvalue), svg.select(\"#datetext\").text(dateDisplayFormat(r.date)) }) }  function addWindow(t, e, n, a) { var i = a ? 500 : 0; if (svg.selectAll(\".index\").empty() || !svg.selectAll(\".index\").classed(\"a\" + t) || n) { var r = t.toString(), d = svg.selectAll(\".aaa\").data(indices.filter(function(t) { return t.name == r })).enter().append(\"g\").attr(\"id\", function(t) { return \"index\" + t.name }).attr(\"class\", function(t) { return \"index a\" + t.name }); if (!e) { var l = d3.selectAll(\".index\").data(); console.log(l), y.domain([d3.min(l, function(t) { return d3.min(t.values, function(t) { return t.yvalue }) }), d3.max(l, function(t) { return d3.max(t.values, function(t) { return t.yvalue }) })]), svg.select(\".y.axis\").call(yAxis), d3.selectAll(\".index\").data().forEach(function(e) { removeWindow(e.name, !1, !1), e.name == t ? addWindow(e.name, !0, !0, !0) : addWindow(e.name, !0, !0, !1) }) } d.append(\"path\").attr(\"class\", \"line\").attr(\"d\", function(t) { return line(t.values) }).style(\"opacity\", 0).style(\"stroke\", function(t) { return color(t.name) }).transition().style(\"opacity\", 1).duration(i) } }  function removeWindow(t, e, n) { var a = e ? 500 : 0, i = \"#index\" + t.toString(); d3.select(i).transition().style(\"opacity\", 0).duration(a).remove().on(\"end\", function() { if (n) { var t = d3.selectAll(\".index\").data(); d3.selectAll(\".index\").empty() || (y.domain([d3.min(t, function(t) { return d3.min(t.values, function(t) { return t.yvalue }) }), d3.max(t, function(t) { return d3.max(t.values, function(t) { return t.yvalue }) })]), svg.select(\".y.axis\").call(yAxis), d3.selectAll(\".index\").data().forEach(function(t) { removeWindow(t.name, !1, !1), addWindow(t.name, !0, !0, !1) }), addMouse()) } }) } var index, origData, indices, focus, margin = { top: 20, right: 80, bottom: 100, left: 50 }, aspect = 1.92, areawidth = $(\"#plotarea\").width(), width = areawidth - margin.left - margin.right, height = Math.round(areawidth / aspect) - margin.top - margin.bottom, parseDate = d3.timeParse(\"%Y-%m-%d\"), x = d3.scaleTime().range([0, width]), y = d3.scaleLinear().range([height, 0]), color = d3.scaleOrdinal(d3.schemeCategory10), dateDisplayFormat = d3.timeFormat(\"%Y-%m-%d\"), xAxis = d3.axisBottom().scale(x), yAxis = d3.axisRight().scale(y), line = d3.line().x(function(t) { return x(t.date) }).y(function(t) { return y(t.yvalue) }).curve(d3.curveBasis), bisectDate = d3.bisector(function(t) { return t.date }).left, svg = d3.select(\"#plotarea\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"id\", \"svgMain\"); d3.tsv(\"";
	public static final String jsScriptPartTwo = ".tsv\", function(t, e) { color.domain(d3.keys(e[0]).filter(function(t) { return \"date\" !== t })), e.forEach(function(t) { t.date = parseDate(t.date) }), indices = color.domain().map(function(t) { return { name: t.substring(0, t.indexOf(\" Days\")), values: e.map(function(e) { return { date: e.date, yvalue: +e[t] } }) } }), origData = e, x.domain(d3.extent(e, function(t) { return t.date })), y.domain([d3.min(indices, function(t) { return d3.min(t.values, function(t) { return t.yvalue }) }), d3.max(indices, function(t) { return d3.max(t.values, function(t) { return t.yvalue }) })]), svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis), svg.append(\"g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(\" + width + \" ,0)\").call(yAxis).append(\"text\").attr(\"y\", 6).attr(\"dy\", \"-.71em\").style(\"text-anchor\", \"end\").text(\"Relative Power\"), index = svg.selectAll(\".index\").data(indices).enter().append(\"g\").attr(\"id\", function(t) { return \"index\" + t.name }).attr(\"class\", function(t) { return \"index a\" + t.name }), index.append(\"path\").attr(\"class\", \"line\").attr(\"d\", function(t) { return line(t.values) }).style(\"stroke\", function(t) { return color(t.name) }); var n = Math.ceil(indices.length / 2), a = width / n; svg.append(\"text\").attr(\"x\", 0).attr(\"y\", height + margin.bottom / 2 + 15).attr(\"class\", \"legend addAll\").style(\"fill\", \"red\").text(\"Add All\").on(\"click\", function() { d3.selectAll(\".index\").data().forEach(function(t) { removeWindow(t.name, !1, !1) }), y.domain([d3.min(indices, function(t) { return d3.min(t.values, function(t) { return t.yvalue }) }), d3.max(indices, function(t) { return d3.max(t.values, function(t) { return t.yvalue }) })]), svg.select(\".y.axis\").call(yAxis), indices.forEach(function(t) { var e = \"legend\" + t.name, n = d3.select(\"#\" + e); \"legend-clicked\" == n.attr(\"class\") && (n.style(\"fill\", color(t.name)).attr(\"class\", \"legend \" + t.name), addWindow(t.name, !0, !1, !0)) }), addMouse() }), svg.append(\"text\").attr(\"x\", 0).attr(\"y\", height + margin.bottom / 2 + 45).attr(\"class\", \"legend removeAll\").style(\"fill\", \"red\").text(\"Remove All\").on(\"click\", function() { indices.forEach(function(t) { var e = \"legend\" + t.name, n = d3.select(\"#\" + e); n.style(\"fill\", \"black\").attr(\"class\", \"legend-clicked\"), removeWindow(t.name, !0, !1) }); var t = d3.selectAll(\".index\").data(); y.domain([d3.min(t, function(t) { return d3.min(t.values, function(t) { return t.yvalue }) }), d3.max(t, function(t) { return d3.max(t.values, function(t) { return t.yvalue }) })]), svg.select(\".y.axis\").call(yAxis) }), addMouse(), indices.forEach(function(t, e) { svg.append(\"text\").attr(\"x\", a + e % n * a).attr(\"y\", n > e ? height + margin.bottom / 2 + 15 : height + margin.bottom / 2 + 45).attr(\"class\", \"legend \" + t.name).attr(\"id\", \"legend\" + t.name).style(\"fill\", color(t.name)).text(t.name + \" Days\").on(\"click\", function() { var e = d3.select(this); \"legend-clicked\" == e.attr(\"class\") ? (e.style(\"fill\", color(t.name)).attr(\"class\", \"legend \" + t.name), addWindow(t.name, !1, !1, !0), addMouse()) : (e.style(\"fill\", \"black\").attr(\"class\", \"legend-clicked\"), removeWindow(t.name, !0, !0)) }) }) }); var addMouse = function() { focus = svg.selectAll(\".index\").append(\"g\").attr(\"id\", function(t) { return \"focus\" + t.name }).attr(\"class\", function(t) { return \"focus \" + t.name }).style(\"display\", \"none\"), focus.append(\"circle\").attr(\"id\", function(t) { return \"circle\" + t.name }).attr(\"r\", 4.5), focus.append(\"text\").attr(\"id\", function(t) { return \"numtext\" + t.name }).attr(\"x\", 9).attr(\"dy\", \"-0.5em\"), svg.append(\"text\").attr(\"id\", \"datetext\").attr(\"x\", width / 2), svg.selectAll(\".index\").append(\"rect\").attr(\"class\", function(t) { return \"overlay \" + t.name }).attr(\"width\", width).attr(\"height\", height).on(\"mouseover\", function() { focus.style(\"display\", null) }).on(\"mouseout\", function() { focus.style(\"display\", \"none\") }).on(\"mousemove\", mousemove) };";

}
